{"version":3,"sources":["images/game-over4.jpg","images/game-over3.jpg","images/crazy-ivan3.jpg","images/plan2.jpg","images/magma3.jpg","images/win2.jpg","images/davenport.jpg","images/mancuso.jpg","images/out-of-control.jpg","images/skip.jpg","helpers.js","Header.js","Modal.js","Map.js","Footer.js","App.js","index.js"],"names":["module","exports","Header","locations","num","push","badLocations","goodLocations","filter","loc","includes","isClose","tgt","newGame","stateSetter1","stateSetter2","stateSetter3","locs","prev","map","show","style","assignShip","location","Math","floor","random","length","Modal","props","image","setShowModal","modalContentRef","useRef","modalBackRef","className","onClick","event","target","ref","src","alt","Map","useState","goodLocObjs","setGoodLocObjs","availableLocs","setAvailableLocs","redOctoberLocation","setRedOctoberLoc","russianSubLocations","setRussianSubLocs","turns","setTurns","startGame","setStartGame","showModal","setImage","updateMap","modal","val","console","log","reAssignShips","handleClick","photos","value","point","Number","gameOver2","win","magma","some","subLoc","crazyIvan","gameOver","plan","mancuso","outOfControl","skip","davenport","useEffect","find","locObj","key","uuidv4","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.252d4b27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/game-over4.b1564261.jpg\";","module.exports = __webpack_public_path__ + \"static/media/game-over3.fcc259f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/crazy-ivan3.a919f60f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/plan2.ed923d7f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/magma3.35f4dc12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/win2.1e674f52.jpg\";","module.exports = __webpack_public_path__ + \"static/media/davenport.a495595b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mancuso.465e4b8c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/out-of-control.16d34a99.jpg\";","module.exports = __webpack_public_path__ + \"static/media/skip.2b81e21c.jpg\";","// Import photos\nimport gameOver from './images/game-over4.jpg';\nimport gameOver2 from './images/game-over3.jpg';\nimport crazyIvan from './images/crazy-ivan3.jpg';\nimport plan from './images/plan2.jpg';\nimport magma from './images/magma3.jpg';\nimport win from './images/win2.jpg';\nimport davenport from './images/davenport.jpg';\nimport mancuso from './images/mancuso.jpg';\nimport outOfControl from './images/out-of-control.jpg';\nimport skip from './images/skip.jpg';\n\n// Create an array to hold 256 point location values in a 16 x 16 grid for the map\nconst locations = [];\nlet num = 1;\nwhile (num <= 256) {\n  locations.push(num);\n  num++;\n}\n// Filter the locations to exclude land masses (i.e., to be only be bodies of water)\nconst badLocations = [\n  1, 2, 3, 4, 16, 17, 18, 19, 20, 21, 33, 34, 35, 36, 37, 49, 50, 51, 52, 53, 54,65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 95, 96, 97, 98, 99, 100, 101, 111, 112, 113, 114, 115, 116, 127, 128, 129, 130, 131, 142, 145, 146, 147, 161, 162, 163, 175, 190, 191, 192, 206, 207, 208, 221, 222, 223, 224, 237, 238, 239, 240, 241, 253, 254, 255, 256\n];\nconst goodLocations = locations.filter(loc => !badLocations.includes(loc));\nconst availableLocs = [...goodLocations];\n// Helper function for determining proximity to Russian subs\nfunction isClose(tgt, num) {\n  const close = [num - 15, num - 16, num - 17, num + 1, num - 1, num + 15, num + 16, num + 17];\n  return close.includes(tgt);\n}\n// Helper function for randomly selecting a photo\nfunction randomPhoto(photos) {\n  const randomIndex = Math.floor(Math.random() * photos.length);\n  return photos[randomIndex];\n}\n// Helper function to clear board\nfunction newGame(stateSetter1, stateSetter2, stateSetter3, locs) {\n  stateSetter1(prev => {\n    const cleanMap = prev.map(loc => {\n      loc.show = false;\n      loc.style = 'location';\n      return {...loc};\n    });\n    return cleanMap;\n  });\n  stateSetter2(0);\n  stateSetter3(locs);\n}\n// Helper function for assigning Ship Locs\nfunction assignShip(location) {\n  const randomIndex = Math.floor((Math.random() * location.length));\n  const shipLocation = location[randomIndex];\n  return shipLocation;\n}\n// Export the all location, body of water location, and the sub location variables\nexport { locations, goodLocations, availableLocs, isClose, randomPhoto, newGame, gameOver, gameOver2, mancuso, plan, davenport, assignShip, crazyIvan, magma, win, outOfControl, skip };","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header>\n      <h1>THE HUNT FOR RED OCTOBER</h1>\n    </header>\n  )\n}\n\nexport default Header;","import React, { useRef } from 'react';\nimport './Modal.css';\n\nfunction Modal(props) {\n  // Variables for props objects\n  const { image, setShowModal } = props.props;\n  // Hooks for refering to DOM nodes\n  const modalContentRef = useRef();\n  const modalBackRef = useRef();\n  // Event handler for removing modal\n  function handleClick(event) {\n    const { className } = event.target;\n    if (className === 'modal-background') {\n      setShowModal(false);\n    }\n  }\n  // Render Modal\n  return (\n    <section className='modal-background' onClick={handleClick} ref={modalBackRef}>\n      <article className='modal-content' ref={modalContentRef}>\n        <img src={image} alt='description'/>\n      </article>\n    </section>\n  );\n}\n\nexport default Modal;","import React, { useState, useEffect } from 'react';\nimport './Map.css';\nimport { v4 as uuidv4 } from 'uuid';\n// Helper functions & photos\nimport { locations, goodLocations, isClose, randomPhoto, newGame, gameOver, gameOver2, mancuso, plan, davenport, assignShip, crazyIvan, magma, win, outOfControl, skip } from './helpers.js';\nimport Modal from './Modal.js';\n\nfunction Map() {\n  // Manage state for water locations, turns, sub locations, whether a game is in progress, showing the modal, and the modal's image\n  const [ goodLocObjs, setGoodLocObjs ] = useState(goodLocations.map(loc => {\n    return { location: loc, show: false, style: 'location' };\n  }));\n  const [ availableLocs, setAvailableLocs ] = useState(goodLocations);\n  const [ redOctoberLocation, setRedOctoberLoc ] = useState(assignShip(availableLocs));\n  const [ russianSubLocations, setRussianSubLocs ] = useState([assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs)]);\n  const [ turns, setTurns ] = useState(0);\n  const [ startGame, setStartGame ] = useState(false);\n  const [ showModal, setShowModal ] = useState(false);\n  const [ image, setImage ] = useState(null);\n\n  // Make sure 2 subs aren't assigned to same location by removing assigned locations from availableLocs everytime a sub location is assigned\n  useEffect(() => {\n    setAvailableLocs(prev => prev.filter(loc => loc !== redOctoberLocation || !russianSubLocations.includes(loc)));\n  }, [redOctoberLocation, russianSubLocations]);\n\n  // Helper Functions\n  // Update map with respected location and show modal with appropriate image\n  function updateMap(modal, image, style, val) {\n    setShowModal(modal);\n    setImage(image);\n    setGoodLocObjs(prev => {\n      const updatedObjs = prev.map(loc => {\n        if (loc.location === val) {\n          console.log('found it');\n          loc.show = true;\n          loc.style = style;\n        }\n        return {...loc};\n      });\n      return updatedObjs;\n    });\n  }\n  // Re-assign ship locations\n  function reAssignShips() {\n    setRedOctoberLoc(assignShip(availableLocs));\n    setRussianSubLocs([assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs), assignShip(availableLocs)]);\n  }\n  // Event handler function for selecting location points in bodies of water\n  function handleClick(event) {\n    const { value } = event.target;\n    const point = Number(value);\n    setTurns(prev => prev + 1);\n    // Render lose game meme and reset game after a certain number of turns\n    if (turns >= 19) {\n      updateMap(true, gameOver2, 'warmer', point);\n      setStartGame(false);\n      newGame(setGoodLocObjs, setTurns, setAvailableLocs, goodLocations);\n      reAssignShips();\n    // Render win game and reset game if you find the Red October\n    } else if (redOctoberLocation === point) {\n      updateMap(true, win, 'found-it', point);\n      setStartGame(false);\n      newGame(setGoodLocObjs, setTurns, setAvailableLocs, goodLocations);\n      reAssignShips();\n    // Render Seaman Jones meme for proximity to Red October\n    } else if (isClose(redOctoberLocation, point)) {\n      updateMap(true, magma, 'found-it', point);\n    // Render Seaman Jones meme for proximity to hostile Russian subs\n    } else if (russianSubLocations.some(subLoc => isClose(subLoc, point))) {\n      updateMap(true, crazyIvan, 'warmer', point);\n    // Render lose game meme and reset game if you find a hostile Russian sub\n    } else if (russianSubLocations.includes(point)) {\n      updateMap(true, gameOver, 'warmer', point);\n      setStartGame(false);\n      newGame(setGoodLocObjs, setTurns, setAvailableLocs, goodLocations);\n      reAssignShips();\n    // Render a random joke meme if you're not close to any subs\n    } else {\n      const photo = randomPhoto([plan, mancuso, outOfControl, skip, davenport])\n      updateMap(true, photo, 'way-off', point);\n    }\n  }\n  // Render Map to the screen\n  return (\n    // If show modal is true, render the modal with the appropriate feedback meme\n    <main>\n      {showModal && <Modal props={{ image, setShowModal }}/>}\n      {startGame &&\n      // Render the map only if you or the Red October haven't been attacked\n      <section className='map'>\n        {locations.map(loc => {\n          // Place invisible clickable buttons throughout the bodies of water on the map, including an event handler for checking what's at the location of each button on clicking it\n          if (goodLocations.includes(loc)) {\n            return (\n              <button\n                className={goodLocObjs.find(locObj => locObj.location === loc).style}\n                onClick={handleClick}\n                value={loc}\n                key={uuidv4()}> X </button>\n            );\n          } else {\n            // Please non-clickable divs throughout land masses on the map\n            return (\n              <div key={uuidv4()}></div>\n            );\n          }\n        })}\n      </section>}\n      {// Display Start Game button if a game is not in progress\n      !startGame &&\n      <section className='reset-container'>\n        <button className='reset-btn' onClick={() => setStartGame(true)}>START GAME</button>\n      </section>}\n    </main>\n  );\n}\n\nexport default Map;","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <footer>\n      <h1>Captain Rameus is defecting to the US with a stealth nuclear sub -- the <em>Red October</em><br/> USSR has deployed 5 subs to sink the <em>Red October</em> and any US vessels looking for it<br/> Sonar will detect hostile subs as subs and may detect <em>Red October</em> as a seismic anomaly <br/> Find the <em>Red October</em> before the Soviets do! -- You have 20 attempts</h1>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport Map from './Map.js';\nimport Footer from './Footer.js';\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <Map/>\n      <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}